// -----------------------------------------------
// IMPORTANT!!!!
// DO NOT EDIT THIS TEST DIRECTLY IN THE PLATFORM
//
// Modify the source in the experiments repo
// -----------------------------------------------

import * as UC from '../../../../lib/uc-lib';
import * as utils from '../../../../lib/utils';

let _NH003 = (function () {

    /*-------------------------------------
    Experiment Code
    ---------------------------------------*/
    let _activate = function () {
        // Generated by CoffeeScript 1.10.0
        (function() {
            var $, Range, Trie,
                indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

            Trie = (function() {
                function Trie() {
                    this.trie = {};
                }

                Trie.prototype.push = function(value) {
                    var char, i, j, len, obj, ref, results;
                    value = value.toString();
                    obj = this.trie;
                    ref = value.split('');
                    results = [];
                    for (i = j = 0, len = ref.length; j < len; i = ++j) {
                        char = ref[i];
                        if (obj[char] == null) {
                            if (i === (value.length - 1)) {
                                obj[char] = null;
                            } else {
                                obj[char] = {};
                            }
                        }
                        results.push(obj = obj[char]);
                    }
                    return results;
                };

                Trie.prototype.find = function(value) {
                    var char, i, j, len, obj, ref;
                    value = value.toString();
                    obj = this.trie;
                    ref = value.split('');
                    for (i = j = 0, len = ref.length; j < len; i = ++j) {
                        char = ref[i];
                        if (obj.hasOwnProperty(char)) {
                            if (obj[char] === null) {
                                return true;
                            }
                        } else {
                            return false;
                        }
                        obj = obj[char];
                    }
                };

                return Trie;

            })();

            Range = (function() {
                function Range(trie1) {
                    this.trie = trie1;
                    if (this.trie.constructor !== Trie) {
                        throw Error('Range constructor requires a Trie parameter');
                    }
                }

                Range.rangeWithString = function(ranges) {
                    var j, k, len, n, r, range, ref, ref1, trie;
                    if (typeof ranges !== 'string') {
                        throw Error('rangeWithString requires a string parameter');
                    }
                    ranges = ranges.replace(/ /g, '');
                    ranges = ranges.split(',');
                    trie = new Trie;
                    for (j = 0, len = ranges.length; j < len; j++) {
                        range = ranges[j];
                        if (r = range.match(/^(\d+)-(\d+)$/)) {
                            for (n = k = ref = r[1], ref1 = r[2]; ref <= ref1 ? k <= ref1 : k >= ref1; n = ref <= ref1 ? ++k : --k) {
                                trie.push(n);
                            }
                        } else if (range.match(/^\d+$/)) {
                            trie.push(range);
                        } else {
                            throw Error("Invalid range '" + r + "'");
                        }
                    }
                    return new Range(trie);
                };

                Range.prototype.match = function(number) {
                    return this.trie.find(number);
                };

                return Range;

            })();


            /*
            jQuery Credit Card Validator 1.1

            Copyright 2012-2015 Pawel Decowski

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software
            is furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included
            in all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
            THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
            IN THE SOFTWARE.
             */

            $ = jQuery;

            $.fn.validateCreditCard = function(callback, options) {
                var bind, card, card_type, card_types, get_card_type, is_valid_length, is_valid_luhn, j, len, normalize, ref, validate, validate_number;
                card_types = [
                    {
                        name: 'amex',
                        range: '34,37',
                        valid_length: [15]
                    }, {
                        name: 'diners_club_carte_blanche',
                        range: '300-305',
                        valid_length: [14]
                    }, {
                        name: 'diners_club_international',
                        range: '36',
                        valid_length: [14]
                    }, {
                        name: 'jcb',
                        range: '3528-3589',
                        valid_length: [16]
                    }, {
                        name: 'laser',
                        range: '6304, 6706, 6709, 6771',
                        valid_length: [16, 17, 18, 19]
                    }, {
                        name: 'visa_electron',
                        range: '4026, 417500, 4508, 4844, 4913, 4917',
                        valid_length: [16]
                    }, {
                        name: 'visa',
                        range: '4',
                        valid_length: [13, 14, 15, 16, 17, 18, 19]
                    }, {
                        name: 'mastercard',
                        range: '51-55,2221-2720',
                        valid_length: [16]
                    }, {
                        name: 'discover',
                        range: '6011, 622126-622925, 644-649, 65',
                        valid_length: [16]
                    }, {
                        name: 'dankort',
                        range: '5019',
                        valid_length: [16]
                    }, {
                        name: 'maestro',
                        range: '50, 56-69',
                        valid_length: [12, 13, 14, 15, 16, 17, 18, 19]
                    }, {
                        name: 'uatp',
                        range: '1',
                        valid_length: [15]
                    }
                ];
                bind = false;
                if (callback) {
                    if (typeof callback === 'object') {
                        options = callback;
                        bind = false;
                        callback = null;
                    } else if (typeof callback === 'function') {
                        bind = true;
                    }
                }
                if (options == null) {
                    options = {};
                }
                if (options.accept == null) {
                    options.accept = (function() {
                        var j, len, results;
                        results = [];
                        for (j = 0, len = card_types.length; j < len; j++) {
                            card = card_types[j];
                            results.push(card.name);
                        }
                        return results;
                    })();
                }
                ref = options.accept;
                for (j = 0, len = ref.length; j < len; j++) {
                    card_type = ref[j];
                    if (indexOf.call((function() {
                            var k, len1, results;
                            results = [];
                            for (k = 0, len1 = card_types.length; k < len1; k++) {
                                card = card_types[k];
                                results.push(card.name);
                            }
                            return results;
                        })(), card_type) < 0) {
                        throw Error("Credit card type '" + card_type + "' is not supported");
                    }
                }
                get_card_type = function(number) {
                    var k, len1, r, ref1;
                    ref1 = (function() {
                        var l, len1, ref1, results;
                        results = [];
                        for (l = 0, len1 = card_types.length; l < len1; l++) {
                            card = card_types[l];
                            if (ref1 = card.name, indexOf.call(options.accept, ref1) >= 0) {
                                results.push(card);
                            }
                        }
                        return results;
                    })();
                    for (k = 0, len1 = ref1.length; k < len1; k++) {
                        card_type = ref1[k];
                        r = Range.rangeWithString(card_type.range);
                        if (r.match(number)) {
                            return card_type;
                        }
                    }
                    return null;
                };
                is_valid_luhn = function(number) {
                    var digit, k, len1, n, ref1, sum;
                    sum = 0;
                    ref1 = number.split('').reverse();
                    for (n = k = 0, len1 = ref1.length; k < len1; n = ++k) {
                        digit = ref1[n];
                        digit = +digit;
                        if (n % 2) {
                            digit *= 2;
                            if (digit < 10) {
                                sum += digit;
                            } else {
                                sum += digit - 9;
                            }
                        } else {
                            sum += digit;
                        }
                    }
                    return sum % 10 === 0;
                };
                is_valid_length = function(number, card_type) {
                    var ref1;
                    return ref1 = number.length, indexOf.call(card_type.valid_length, ref1) >= 0;
                };
                validate_number = function(number) {
                    var length_valid, luhn_valid;
                    card_type = get_card_type(number);
                    luhn_valid = false;
                    length_valid = false;
                    if (card_type != null) {
                        luhn_valid = is_valid_luhn(number);
                        length_valid = is_valid_length(number, card_type);
                    }
                    return {
                        card_type: card_type,
                        valid: luhn_valid && length_valid,
                        luhn_valid: luhn_valid,
                        length_valid: length_valid
                    };
                };
                validate = (function(_this) {
                    return function() {
                        var number;
                        number = normalize($(_this).val());
                        return validate_number(number);
                    };
                })(this);
                normalize = function(number) {
                    return number.replace(/[ -]/g, '');
                };
                if (!bind) {
                    return validate();
                }
                this.on('input.jccv', (function(_this) {
                    return function() {
                        $(_this).off('keyup.jccv');
                        return callback.call(_this, validate());
                    };
                })(this));
                this.on('keyup.jccv', (function(_this) {
                    return function() {
                        return callback.call(_this, validate());
                    };
                })(this));
                callback.call(this, validate());
                return this;
            };

        }).call(this);

        // Namespace CSS
        let $ = window.jQuery;
        $('body').addClass('NH003');

        // Payment container
        let $paymentWrapper = $('#pnlPayment');

        $paymentWrapper.find('.box-with-border:first > hr:first').hide();

        // HTML for top header
        let htmlTop = `<div class="NH003_topHeaderWrapper">
                           <div class="NH003_topLeftWrapper">
                               <p class="NH003_securityText">We take online security seriously and do the utmost to 
                               protect your details - <a class="NH003_findout">find out more</a></p>
                           </div>
                           <div class="NH003_topRightWrapper"></div>
                       </div>
                    `;
                            
        // Insert it below payment
        $('.box-with-border:first').prepend(htmlTop);

        // Wrap top header
        $('.box-with-border:first > h2:first').prependTo('.NH003_topLeftWrapper');

        // Place 'cards' img at the top after 'We accept'
        $('.card-type > .right').addClass('NH003_cardsAccepted').insertAfter('.NH003_topHeaderWrapper');

        // Reorder card input fields
        let $allFields = $paymentWrapper.find('.field-row-wide');
        $allFields.find(' > label').append(' *');
        $paymentWrapper.find('.field-row-wide:eq(4)').insertAfter('.NH003_cardsAccepted');
        $paymentWrapper.find('.field-row-wide:eq(4) .optional').hide();
        $paymentWrapper.find('.field-row-wide:eq(2)').after($paymentWrapper.find('.field-row-wide:eq(5)'));
        $('label[for="txtIssueNo"]').text('Issue number (optional)');
        $('label[for="ddlMonthFrom"]').text('Valid from (optional)');
        $paymentWrapper.find('.field-row-wide:eq(5)').after($('.please-note-text'));
        $paymentWrapper.find('.field-row-wide:eq(6)').addClass('NH003_fieldRowLast');

        // Promo code further down
        let $promoWrapper = $('#divPromoCode');
        $promoWrapper.insertBefore('.box-with-border.white');
        // Hide inputs (on page load) simulate dropdown for promo code
        $promoWrapper.find(' > input').hide();
        $promoWrapper.find(' > label').text('Add promo code');

        $promoWrapper.on('click', ' > label', function () {
            $promoWrapper.find(' > input:eq(0)').slideToggle('fast');
            $promoWrapper.find(' > input:eq(1)').fadeToggle('fast');
        });

        // Move payment confirmation to just above CTA
        $('#rblPaymentOptions').closest('.field-row-wide')
            .addClass('NH003_confirmation-block')
            .appendTo('#pnlPayment');

        // CTA text
        $('input[name="btnContinue"]').val('CONTINUE');
        // Text under CTA
        $(`<p class="NH003_textUnderCta">If you need any help please call us on 0844 477 9990 between 
          8am and 8pm 7 days a week</p>`).insertAfter('input[name="btnContinue"]');

        // Tooltip for some info..
        $('.NH003_findout').append('<div class="NH003_secCodeTooltipTop">National Holidays are members of the Bonded Coach Holiday Group of the Confederation Of Passenger Transport UK Ltd. This is a government approved consumer protection scheme.</div>');
        $('.NH003_findout').on('click', function (e) {
            e.preventDefault();
            $('.NH003_secCodeTooltipTop').fadeToggle('slow');
        });

        // Tooltip for sec code
        $('.i-icon').prepend('<div class="NH003_secCodeTooltip">This 3-digit number is on the back of the card next to the signature panel.</div>');
        $('.i-icon').on('click', function () {
            $('.NH003_secCodeTooltip').fadeToggle('slow');
        });

        /*AMENDS*/
        //Change input types
        var cardnumberInput = $('#txtCardNo'),
            securityNo = $('#txtSecurity'),
            issueNumber = $('#txtIssueNo');

        cardnumberInput.attr('type','numer');
        cardnumberInput.attr('pattern','[0-9]*');
        securityNo.attr('type','number');
        securityNo.attr('pattern','[0-9]*');
        issueNumber.attr('type','number');
        issueNumber.attr('pattern','[0-9]*');

        // Move 'I wish to pay' box
        $('.NH003_fieldRowLast.NH003_confirmation-block').insertAfter('.NH003_cardsAccepted');

        // Move booking info to the top
        // var bookingInfo = $('.container .right .box-with-border.white');
        // bookingInfo.insertBefore('.NH003_topHeaderWrapper:first');

        // Show card dynamically
        let cardsObj = {
            'visa': '//useruploads.visualwebsiteoptimizer.com/useruploads/317288/images/c9ad157f7fe83a378b168b6204d69a15_visa.png',
            'mastercard': '//useruploads.visualwebsiteoptimizer.com/useruploads/317288/images/7fd0c2807500cce513fbb315a79831d6_mastercard.png',
            'amex': '//useruploads.visualwebsiteoptimizer.com/useruploads/317288/images/6179108a3d14b46227c7488abc6e1886_amex.png',
            'maestro': '//useruploads.visualwebsiteoptimizer.com/useruploads/317288/images/32f03f8322f9e89638393c0a63cac9d0_maestro.png',
            'visa_electron': '//useruploads.visualwebsiteoptimizer.com/useruploads/317288/images/1011912ab088aee421e5a510e79f50fb_visa_electron.png',
            'discover': '//useruploads.visualwebsiteoptimizer.com/useruploads/317288/images/6cbaa0b9dea7cadcb1a0190d94c9e018_discover.png',
            'default': '//useruploads.visualwebsiteoptimizer.com/useruploads/317288/images/ea4bb9b94de10ee1fae7679b53ee8010_default.png'
        };

        var $cardInput = $('#txtCardNo');

        // Wrap in container to use psuedo elements on input
        $cardInput.wrap('<div class="NH003_input-wrap"></div>');
        var $cardInputWrap = $cardInput.parent('.NH003_input-wrap');
        window.$cardInputWrap = $cardInputWrap;
        $cardInput.validateCreditCard(function (result) {
            var cardType = (function() {
                if (result && result.card_type && result.card_type.name) {
                    return result.card_type.name;
                } else {
                    return null;
                }
            }());

            var backgroundImage = (function() {
                if (!cardType) {
                    return cardsObj.default;
                } else {
                    var cardBg = cardsObj[cardType.toLowerCase()];
                    if (cardBg) {
                        return cardBg;
                    } else {
                        return cardsObj.default;
                    }
                }
            }());

            $cardInput.css({'background-image': 'url("' + backgroundImage + '")'});

            // If all 16 digits have been entered, check if valid card number
            var isValid = false;
            var value = $cardInput.val().match(/\d+/g);

            if (value && value.join('').length === 16) {
                if (result.luhn_valid) isValid = true;
            }

            if (isValid) {
                if (!$cardInputWrap.hasClass('NH003_valid')) {
                    $cardInputWrap.addClass('NH003_valid');
                }
            } else {    
                if ($cardInputWrap.hasClass('NH003_valid')) {
                    $cardInputWrap.removeClass('NH003_valid');
                }
            }

        });

        /*
            New validation on card field to allow spaces
        */
        var $errorMsg = $('<div class="NH003_card-error" style="display:none;"></div>');
        $cardInputWrap.after($errorMsg);

        $cardInput.on('change', function() {
            // Validate on change 
            var val = this.value;
            var valid = true;

            if (!/^[\d\s]+$/.test(val)) {
                // Has characters other than numbers and spaces
                valid = false;
            } else if (val && val.match(/\d+/g) && val.match(/\d+/g).join('').length !== 16) {
                // There is not 16 digits
                valid = false;
            }

            if (!valid) {
                if (val.length) {
                    $errorMsg.text('Invalid').show();
                    $(this).addClass('NH003_validation_shown');
                } else {
                    $errorMsg.text('Required').show();
                    $(this).removeClass('NH003_validation_shown');
                }
            } else if ($errorMsg.css('display') !== 'none') {
                $errorMsg.empty().hide();
            }

            // Remove all spaces to make valid for submission
            this.value = val.replace(/\s/g, '');
        });

        // On continue, show error if card field is empty
        $('#btnContinue').on('click', function() {
            var value = $cardInput.val();
            if (!value.length) {
                $errorMsg.text('Required').show();
            }
        });

        utils.events.send('NH003', 'Page View', 'NH003 - Mobile Payment Reassurance', true);

    };

    /*--------------------------------------
    Activation
    ---------------------------------------*/
    let _triggers = (options) => {
        utils.fullStory('NH003', 'Variation 1 Mobile');

        UC.poller([
            '#txtCardNo',
            () => {
                return !!window.jQuery;
            },
            () => {
                return !!window.ga;
            }
        ], _activate);
    };

    // Run experiment
    _triggers();

})(); // _NH003